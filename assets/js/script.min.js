function Game(){}function Player(e,t){this.name=e,this.role=t,this.shootCounter=0,this.fleet={fourGrid:{weight:4,quantity:1,name:"Четырехпалубник",coords:[]},threeGrid:{weight:3,quantity:2,name:"Трехпалубник",coords:[]},twoGrid:{weight:2,quantity:3,name:"Двухпалубник",coords:[]},oneGrid:{weight:1,quantity:4,name:"Однопалубник",coords:[]}},this.seaCoords=[],this.enemyGrids=[],this.x=10,this.y=10,this.getName=function(){return this.name},this.getRole=function(){return this.role},this.getShootCounter=function(){return this.shootCounter},this.setShootCounter=function(){this.shootCounter++},this.getFleet=function(){return this.fleet},this.getX=function(){return this.x},this.getY=function(){return this.y},this.getSeaCoords=function(){return this.seaCoords},this.addSeaCoords=function(e){this.seaCoords.push(e)},this.removeSeaCoords=function(e){this.seaCoords.splice(e,1)},this.getEnemyGrids=function(){return this.enemyGrids},this.addEnemyGrids=function(e){this.enemyGrids.push(e)},this.removeEnemyGrids=function(e){this.enemyGrids.splice(e,1)},this.initPlayer=function(){this.createGameField(),this.locateFleet()},this.createGameField=function(){for(var e=this.getX(),t=this.getY(),n=1;e>=n;n++)for(var r=1;t>=r;r++)document.getElementById("gamefield_"+this.getRole()).innerHTML+='<span class="seagrid" id="'+n+":"+r+"_"+this.getRole()+'"></span>',this.addSeaCoords(n+":"+r),"comp"===this.getRole()&&this.addEnemyGrids(n+":"+r)},this.locateFleet=function(){function e(){var e=[],r=!1;do{var i=t(),s=n(i);r=o(s)}while(r===!1);return r===!0&&e.push(s[0],s[1]),e}function t(){var e=Math.floor(2*Math.random()),t=Math.floor(Math.random()*(c.getSeaCoords().length-1+1)),n=c.getSeaCoords()[t];return[n,e]}function n(e){for(var t=[],n=r(e),o=e[0].split(":"),i=parseInt(o[0]),s=parseInt(o[1]),a=e[1],u=0;u<h.weight;u++)switch(a){case 1:var c=i,l=s+u;t.push(c+":"+l);break;case 0:var c=i+u,l=s;t.push(c+":"+l)}return[t,n]}function r(e){for(var t=[],n=e[0].split(":"),r=parseInt(n[0]),o=parseInt(n[1]),i=e[1],s=0;s<h.weight;s++)switch(i){case 1:r>1&&t.push(r-1+":"+(o+s)),10>r&&t.push(r+1+":"+(o+s)),0==s&&r>=1&&o>1&&(t.push(r+":"+(o-1)),r>1&&t.push(r-1+":"+(o-1)),10>r&&t.push(r+1+":"+(o-1))),s===h.weight-1&&10-s>o&&(t.push(r+":"+(o+s+1)),r>1&&t.push(r-1+":"+(o+s+1)),10>r&&t.push(r+1+":"+(o+s+1)));break;case 0:o>1&&t.push(r+s+":"+(o-1)),10>o&&t.push(r+s+":"+(o+1)),0===s&&r>1&&o>=1&&(t.push(r-1+":"+o),o>1&&t.push(r-1+":"+(o-1)),10>o&&t.push(r-1+":"+(o+1))),s===h.weight-1&&10-s>r&&(t.push(r+s+1+":"+o),o>1&&t.push(r+s+1+":"+(o-1)),10>o&&t.push(r+s+1+":"+(o+1)))}return t}function o(e){var t,n,r=!1,o=[],i=[];for(var s in e[0]){var a=c.getSeaCoords().indexOf(e[0][s]),u=d.indexOf(e[0][s]);o.push(a),i.push(u)}var h=function(e){return-1==e};return t=o.some(h),n=i.some(h),r=t===!1&&n===!0?!0:!1}function i(e){var t=e[0],n=e[1];s(t,n)}function s(){for(var e in arguments)for(var t in arguments[e]){var n=c.getSeaCoords(),r=n.indexOf(arguments[e][t]);-1!==r&&c.removeSeaCoords(r)}}function a(e){for(var t in e){var n=e[t]+"_"+c.getRole();document.getElementById(n).setAttribute("class","sheep")}}var u,h,c=this,l=c.getFleet(),d=[];for(u in l){h=l[u];for(var m=0;m<h.quantity;m++){var f=e();h.coords.push(f[0]);for(var g in f[1]){var y=d.indexOf(f[1][g]);-1===y&&d.push(f[1][g])}i(f),"user"===c.getRole()&&a(f[0])}}}}Game.prototype={constructor:Game,players:[],getPlayers:function(){return this.players},setPlayers:function(e,t){for(var n in arguments)this.players.push(arguments[n])},getPlayerByRole:function(e){var t=this.getPlayers();for(var n in t)if(t[n].role===e)return t[n]},startGame:function(){this.initPlayers(),this.initShooter()},initPlayers:function(){this.setPlayers(new Player("Пользователь","user"),new Player("Компьютер","comp"));var e=this.getPlayers();for(var t in e){var n=e[t];n.initPlayer()}},initShooter:function(){function e(){var e=this.getAttribute("id"),n=e.indexOf("_"),r=e.substring(0,n);t(r,"user")}function t(t,o){var s,a,h,c=u.getPlayerByRole(o),l=t+"_";"user"===o?(s=u.getPlayerByRole("comp"),l+="comp"):(s=u.getPlayerByRole("user"),l+="user"),a=s.getFleet(),c.setShootCounter(),h=c.getName()+". Выстрел №"+c.getShootCounter()+". ";var d=0;e:for(var m in a){var f=a[m].coords;for(var g in f){var y=f[g].indexOf(t);if(-1!==y){document.getElementById(l).setAttribute("class","killed"),document.getElementById(l).removeEventListener("click",e),1===f[g].length?document.getElementById("countShoot").innerHTML+="<p>"+h+a[m].name+" убит!</p>":document.getElementById("countShoot").innerHTML+="<p>"+h+a[m].name+" ранен!</p>",r(),f[g].splice(y,1);for(var m in a){var f=a[m].coords;for(var g in f)d+=f[g].length}return 0===d&&i(c),"comp"===o&&n("intelligent"),!0}}}document.getElementById("countShoot").innerHTML+="<p>"+h+"Промах!</p>",document.getElementById(l).setAttribute("class","disabled"),document.getElementById(l).removeEventListener("click",e),r(),"user"===o&&n()}function n(e){var n=o(e);t(n,"comp")}function r(){var e=document.getElementById("countShoot");e.scrollTop=e.scrollHeight}function o(){var e,t,n=u.getPlayerByRole("comp").getEnemyGrids();return e=Math.floor(Math.random()*(n.length-1+1)),t=n[e],u.getPlayerByRole("comp").removeEnemyGrids(e),t}function i(e){document.getElementById("body").setAttribute("style","visibility:hidden;"),alert("Игра окончена! Выйграл "+e.getName()+" за "+e.getShootCounter()+" выстрелов!"),document.getElementById("reloadGame").setAttribute("style","display:inline-block"),document.getElementById("reloadGame").addEventListener("click",s)}function s(){location.reload()}for(var a=document.getElementById("gamefield_comp").getElementsByTagName("span"),u=this,h=0;h<a.length;h++)a[h].addEventListener("click",e)}},function(){var e=new Game;e.startGame()}();
//# sourceMappingURL=data:application/json;base64,
