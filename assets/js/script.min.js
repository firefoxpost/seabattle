function Game(){}function Player(e,t){this.name=e,this.role=t,this.shootCounter=0,this.fleet={fourGrid:{weight:4,quantity:1,name:"Четырехпалубник",coords:[]},threeGrid:{weight:3,quantity:2,name:"Трехпалубник",coords:[]},twoGrid:{weight:2,quantity:3,name:"Двухпалубник",coords:[]},oneGrid:{weight:1,quantity:4,name:"Однопалубник",coords:[]}},this.seaCoords=[],this.enemyGrids=[],this.x=10,this.y=10,this.getName=function(){return this.name},this.getRole=function(){return this.role},this.getShootCounter=function(){return this.shootCounter},this.setShootCounter=function(){this.shootCounter++},this.getFleet=function(){return this.fleet},this.getX=function(){return this.x},this.getY=function(){return this.y},this.getSeaCoords=function(){return this.seaCoords},this.addSeaCoords=function(e){this.seaCoords.push(e)},this.removeSeaCoords=function(e){this.seaCoords.splice(e,1)},this.getEnemyGrids=function(){return this.enemyGrids},this.addEnemyGrids=function(e){this.enemyGrids.push(e)},this.removeEnemyGrids=function(e){this.enemyGrids.splice(e,1)},this.initPlayer=function(){this.createGameField(),this.locateFleet()},this.createGameField=function(){for(var e=this.getX(),t=this.getY(),r=1;e>=r;r++)for(var n=1;t>=n;n++)document.getElementById("gamefield_"+this.getRole()).innerHTML+='<span class="seagrid" id="'+r+":"+n+"_"+this.getRole()+'"></span>',this.addSeaCoords(r+":"+n),"comp"===this.getRole()&&this.addEnemyGrids(r+":"+n)},this.locateFleet=function(){function e(){var e=[],n=!1;do{var i=t(),s=r(i);n=o(s)}while(n===!1);return n===!0&&e.push(s[0],s[1]),e}function t(){var e=Math.floor(2*Math.random()),t=Math.floor(Math.random()*(c.getSeaCoords().length-1+1)),r=c.getSeaCoords()[t];return[r,e]}function r(e){for(var t=[],r=n(e),o=e[0].split(":"),i=parseInt(o[0]),s=parseInt(o[1]),a=e[1],u=0;u<h.weight;u++)switch(a){case 1:var c=i,l=s+u;t.push(c+":"+l);break;case 0:var c=i+u,l=s;t.push(c+":"+l)}return[t,r]}function n(e){for(var t=[],r=e[0].split(":"),n=parseInt(r[0]),o=parseInt(r[1]),i=e[1],s=0;s<h.weight;s++)switch(i){case 1:n>1&&t.push(n-1+":"+(o+s)),10>n&&t.push(n+1+":"+(o+s)),0==s&&n>=1&&o>1&&(t.push(n+":"+(o-1)),n>1&&t.push(n-1+":"+(o-1)),10>n&&t.push(n+1+":"+(o-1))),s===h.weight-1&&10-s>o&&(t.push(n+":"+(o+s+1)),n>1&&t.push(n-1+":"+(o+s+1)),10>n&&t.push(n+1+":"+(o+s+1)));break;case 0:o>1&&t.push(n+s+":"+(o-1)),10>o&&t.push(n+s+":"+(o+1)),0===s&&n>1&&o>=1&&(t.push(n-1+":"+o),o>1&&t.push(n-1+":"+(o-1)),10>o&&t.push(n-1+":"+(o+1))),s===h.weight-1&&10-s>n&&(t.push(n+s+1+":"+o),o>1&&t.push(n+s+1+":"+(o-1)),10>o&&t.push(n+s+1+":"+(o+1)))}return t}function o(e){var t,r,n=!1,o=[],i=[];for(var s in e[0]){var a=c.getSeaCoords().indexOf(e[0][s]),u=d.indexOf(e[0][s]);o.push(a),i.push(u)}var h=function(e){return-1==e};return t=o.some(h),r=i.some(h),n=t===!1&&r===!0?!0:!1}function i(e){var t=e[0],r=e[1];s(t,r)}function s(){for(var e in arguments)for(var t in arguments[e]){var r=c.getSeaCoords(),n=r.indexOf(arguments[e][t]);-1!==n&&c.removeSeaCoords(n)}}function a(e){for(var t in e){var r=e[t]+"_"+c.getRole();document.getElementById(r).setAttribute("class","sheep")}}var u,h,c=this,l=c.getFleet(),d=[];for(u in l){h=l[u];for(var m=0;m<h.quantity;m++){var f=e();h.coords.push(f[0]);for(var g in f[1]){var y=d.indexOf(f[1][g]);-1===y&&d.push(f[1][g])}i(f),"user"===c.getRole()&&a(f[0])}}}}Game.prototype={constructor:Game,players:[],getPlayers:function(){return this.players},setPlayers:function(e,t){for(var r in arguments)this.players.push(arguments[r])},getPlayerByRole:function(e){var t=this.getPlayers();for(var r in t)if(t[r].role===e)return t[r]},startGame:function(){this.initPlayers(),this.initShooter()},initPlayers:function(){this.setPlayers(new Player("Пользователь","user"),new Player("Компьютер","comp"));var e=this.getPlayers();for(var t in e){var r=e[t];r.initPlayer()}},initShooter:function(){function e(){var e=this.getAttribute("id"),r=e.indexOf("_"),n=e.substring(0,r);t(n,"user")}function t(t,n){var i,a,u,h=s.getPlayerByRole(n),c=t+"_";"user"===n?(i=s.getPlayerByRole("comp"),c+="comp"):(i=s.getPlayerByRole("user"),c+="user"),a=i.getFleet(),h.setShootCounter(),u=h.getName()+". Выстрел №"+h.getShootCounter()+". ";var l=0;e:for(var d in a){var m=a[d].coords;for(var f in m){var g=m[f].indexOf(t);if(-1!==g){document.getElementById(c).setAttribute("class","killed"),document.getElementById(c).removeEventListener("click",e),1===m[f].length?document.getElementById("countShoot").innerHTML+="<p>"+u+a[d].name+" убит!</p>":document.getElementById("countShoot").innerHTML+="<p>"+u+a[d].name+" ранен!</p>",m[f].splice(g,1);for(var d in a){var m=a[d].coords;for(var f in m)l+=m[f].length}return 0===l&&o(h),"comp"===n&&r("intelligent"),!0}}}document.getElementById("countShoot").innerHTML+="<p>"+u+"Промах!</p>",document.getElementById(c).setAttribute("class","disabled"),document.getElementById(c).removeEventListener("click",e),"user"===n&&r()}function r(e){var r=n(e);t(r,"comp")}function n(){var e,t,r=s.getPlayerByRole("comp").getEnemyGrids();return e=Math.floor(Math.random()*(r.length-1+1)),t=r[e],s.getPlayerByRole("comp").removeEnemyGrids(e),t}function o(e){return document.getElementById("body").setAttribute("style","visibility:hidden;"),alert("Игра окончена! Выйграл "+e.getName()+" за "+e.getShootCounter()+" выстрелов!"),!1}for(var i=document.getElementById("gamefield_comp").getElementsByTagName("span"),s=this,a=0;a<i.length;a++)i[a].addEventListener("click",e)}},function(){var e=new Game;e.startGame()}();
//# sourceMappingURL=data:application/json;base64,
